Date 日期对象
                      日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。
                      定义一个时间对象 :var Udate=new Date(); 
                      注意:使用关键字new，Date()的首字母必须大写。 
                      使 Udate 成为日期对象，并且已有初始值：当前时间(当前电脑系统时间)。
                            get/setDate()           返回/设置日期
                            get/setFullYear()       返回/设置年份，用四位数表示
                            get/setYear()           返回/设置年份
                            get/setMonth()          返回/设置月份。  0：一月.....11:十二月，所以加一。
                            get/setHours()          返回/设置小时，24小时制
                            get/setMinutes()        返回/设置分钟数
                            get/setSeconds()        返回/设置秒钟数
                            get/setTime()           返回/设置时间（毫秒为单位）
get/setFullYear()     返回/设置年份，用四位数表示
getDay()              返回星期，返回的是0~6的数字，0表示星期天。如果要返回相对应“星期”，通过数组完成。代码如下：
                    <script type="text/javascript">
                      var mydate=new Date();//定义日期对象
                      var weekday=["星期日","星期一","星期二","星期三","星期四","星期五","星期六"];//定义数组对象,给每个数组项赋值
                      var mynum=mydate.getDay();//返回值存储在变量mynum中
                      document.write(mydate.getDay());//输出getDay()获取值
                      document.write("今天是："+ weekday[mynum]);//输出星期几
                    </script>
get/setTime()         返回/设置时间， 单位毫秒数，计算从1970年1月1日零时到日期对象所指的日期的毫米数。
                      1. 一小时 60 分，一分 60 秒，一秒 1000 毫秒
                      2. 时间推迟 1 小时,就是: “x.setTime(x.getTime() + 60 * 60 * 1000);”。
                         时间提前则是 “-”
stringObject.length; 返回该字符串的长度。使用 String 对象的 toUpperCase() 方法来将字符串小写字母转换为大写。
                                                        toLowerCase()方法，将字符串所有大写字母都变成小写的字符串.
charAt() 方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。
                      1.字符串中第一个字符的下标是 0。最后一个字符的下标为字符串长度减一（string.length-1）。
                      2.如果参数 index 不在 0 与 string.length-1 之间，该方法将返回一个空字符串
indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置.
                      语法 stringObject.indexOf(substring, startpos)
                      说明：1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 substring。
                           2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。
                           3.如果找到一个 substring，则返回 substring 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。
                      注意：1.indexOf() 方法区分大小写。
                           2.如果要检索的字符串值没有出现，则该方法返回 -1。
split() 方法将字符串分割为字符串数组，并返回此数组。
                      语法：stringObject.split(separator,limit)
                      separator:必需。从该参数指定的地方分割stringObject
                      limit：可选参数，分割的次数。如设置该参数，返回的子串不会多于这个参数指定的数组，如果无此参为不限制次数。
                      注意：如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。
substring() 方法用于提取字符串中介于两个指定下标之间的字符。
                      语法:stringObject.substring(startPos,stopPos) 
                      starPos：必需。一个非负的整数，开始位置。
                      stopPos：可选。一个非负的整数，结束位置，如果省略该参数，那么返回的子串会一直到字符串对象的结尾。
                      注意：1. 返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。
                           2. 如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。
                           3. 如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。
substr() 方法从字符串中提取从 startPos位置开始的指定数目的字符串。
                      语法:stringObject.substr(startPos,length)
                      starPos:必需。要提取的子串的起始位置。必须是数值。
                      length:可选。提取字符串的长度。如果省略，返回从stringObject的开始位置starPos到stringObject的结尾的字符。
                      注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。
                           如果startPos为负数且绝对值大于字符串长度，startPos为0。
Math对象，提供对数据的数学计算。(具体见w3school)
                      使用 Math 的属性和方法，代码如下：
                          <script type="text/javascript">
                            var mypi=Math.PI; 
                            var myabs=Math.abs(-15);
                            document.write(mypi);
                            document.write(myabs);
                          </script>

                      运行结果:

                      3.141592653589793
                      15
                      注意：Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。
      向上取整ceil()
          ceil() 方法可对一个数进行向上取整.     x:必需。必需是一个数值。
          注意：它返回的是大于或等于x，并且与x最接近的整数。
      向下取整floor()         (高斯函数)
          floor() 方法可对一个数进行向下取整。
          语法:Math.floor(x)         x ：必需。必须是一个数值。
          注意：返回的是小于或等于x，并且与 x 最接近的整数。
      四舍五入round()
          round() 方法可把一个数字四舍五入为最接近的整数。
          语法:Math.round(x)        x ：必需。必须是一个数值。
          注意：1. 返回与 x 最接近的整数。
               2. 对于 0.5，该方法将进行上舍入。(5.5 将舍入为 6)
               3. 如果 x 与两侧整数同等接近，则结果接近 +∞方向的数字值 。
      随机数 random()
          random() 方法可返回介于 0 ~ 1（大于或等于 0 但小于 1 )之间的一个随机数。
          语法：Math.random();
          注意：返回一个大于或等于 0 但小于 1 的符号为正的数字值。
                我们取得介于 0 到 1 之间的一个随机数，代码如下：
                    <script type="text/javascript">
                      document.write(Math.random());
                    </script>
                运行结果：
                0.190305486195328  
          注意:因为是随机数，所以每次运行结果不一样，但是0 ~ 1的数值
                获得0 ~ 10之间的随机数，代码如下:
                    <script type="text/javascript">
                      document.write((Math.random())*10);
                    </script>
                    运行结果：8.72153625893887
                计算不大于10的整数。代码如下：
                    <script type="text/javascript">
                        document.write(Math.round((Math.random())*10));
                    </script>
 Array 数组对象 
                    数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的
                    数组定义的方法：
                        1. 定义了一个空数组:
                           var  数组名= new Array();
                        2. 定义时指定有n个空元素的数组：
                           var 数组名 =new Array(n);
                        3.定义数组的时候，直接初始化数据：
                           var  数组名 = [<元素1>, <元素2>, <元素3>...];
                        我们定义myArray数组，并赋值，代码如下：var myArray = [2, 8, 6]; 
                           说明：定义了一个数组 myArray，里边的元素是：myArray[0] = 2; myArray[1] = 8; myArray[2] = 6。
                        数组元素使用：数组名[下标] = 值;
                           注意: 数组的下标用方括号括起来，从0开始。
                        数组属性：length 用法：<数组对象>.length；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。
数组连接concat()
                    concat() 方法用于连接两个或多个数组。此方法返回一个新数组，不改变原来的数组。
                    语法arrayObject.concat(array1,array2,...,arrayN)
                    注意:  该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。
指定分隔符连接数组元素join()
                    join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。
                    语法：arrayObject.join(分隔符)
                          separator:可选。指定要使用的分隔符，如果省略该参数，则使用逗号作为分隔符。
颠倒数组元素顺序reverse()
                    reverse() 方法用于颠倒数组中元素的顺序。
                    语法：arrayObject.reverse()
                    注意：该方法会改变原来的数组，而不会创建新的数组。
选定元素slice()
                    slice() 方法可从已有的数组中返回选定的元素。
                    语法 : arrayObject.slice(start,end)
                    参数说明： start：必需。规定从何处开始选取，如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1指的是最后一个元素。
                              end：可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从start到数组结束的所有元素。
                    1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。
                    2. 该方法并不会修改数组，而是返回一个子数组。
                    注意：
                        1. 可使用负值从数组的尾部选取元素。
                        2.如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。
                        3. String.slice() 与 Array.slice() 相似。
数组排序sort()
                    sort()方法使数组中的元素按照一定的顺序排列。
                    语法:arrayObject.sort(方法函数)     方法函数：可选。规定排序顺序。必须是函数。
                    1.如果不指定<方法函数>，则按unicode码顺序排列。
                    2.如果指定<方法函数>，则按<方法函数>所指定的排序方法排序。
                    myArray.sort(sortMethod);
                    注意: 该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下： 
                          若返回值<=-1，则表示 A 在排序后的序列中出现在 B 之前。
                          若返回值>-1 && <1，则表示 A 和 B 具有相同的排序顺序。
                          若返回值>=1，则表示 A 在排序后的序列中出现在 B 之后。
                        







